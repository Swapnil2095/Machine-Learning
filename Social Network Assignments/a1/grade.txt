Grade: 43.00/50.00

3 Deduction(s):

--------------
#1: 5.00 points
Failing test: test_bfs_3: 
        @points=5
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 106, in test_bfs_3
    self.assertEqual(1.0, round(b[('E', 'F')], 2))
AssertionError: 1.0 != 0.33

source:
    def test_bfs_3(self):
         """
         @points=5
         """
         graph = example_graph2()
         node2distances, node2num_paths, node2parents = bfs(graph, 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
         b = bottom_up(graph, node2distances, node2num_paths, node2parents)
         self.assertEqual(1.0, round(b[('E', 'F')], 2))
         self.assertEqual(3.83, round(b[('A', 'D')], 2))
         self.assertEqual(1.67, round(b[('B', 'D')], 2))
         self.assertEqual(1.17, round(b[('D', 'G')], 2))
         self.assertEqual(2.17, round(b[('A', 'C')], 2))
         self.assertEqual(0.67, round(b[('B', 'E')], 2))
         self.assertEqual(1.33, round(b[('E', 'G')], 2))
         self.assertEqual(1.17, round(b[('C', 'G')], 2))
--------------

--------------
#2: 1.00 points
Failing test: test_complexity_1: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 123, in test_complexity_1
    self.assertTrue(x == y, 'k has no effect in worst case')
AssertionError: False is not true : k has no effect in worst case

source:
    def test_complexity_1(self):
         """
         @points=1
         """
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(1000, 500, 50)
         self.assertTrue(y is not None, 'nothing returned')
         self.assertTrue(x == y, 'k has no effect in worst case')
--------------

--------------
#3: 1.00 points
Failing test: test_complexity_4: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 154, in test_complexity_4
    self.assertEqual(round(y - x, 0), 4000, 'additive')
AssertionError: 9210.0 != 4000 : additive

source:
    def test_complexity_4(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 500, 10)
         self.assertEqual(round(y - x, 0), 4000, 'additive')
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(2000, 1500, 10)
         self.assertEqual(round(y - x, 0), 1000, 'additive')
--------------

